parent.0 = ec.params
# Todas las subpop tendrán los mismos params
pop.default-subpop = 0

# ec.Evolve
# simple generational evolution
#state = 				ec.simple.SimpleEvolutionState
state = 				model.MyEvolutionState

# ec.EvolutionState
# We're using the standard initialization method
init = 					ec.simple.SimpleInitializer
# We're using the standard (empty) finalization method
finish = 	        		ec.simple.SimpleFinisher
# We're using the standard (empty) exchange method
exch = 					ec.simple.SimpleExchanger
#exch = ec.exchange.InterPopulationExchange

#exch.subpop.0.select = ec.select.TournamentSelection
#exch.subpop.1.select = ec.select.TournamentSelection
#exch.subpop.2.select = ec.select.TournamentSelection
#exch.subpop.3.select = ec.select.TournamentSelection
#exch.subpop.0.select-to-die = ec.select.TournamentSelection
#exch.subpop.1.select-to-die = ec.select.TournamentSelection
#exch.subpop.2.select-to-die = ec.select.TournamentSelection
#exch.subpop.3.select-to-die = ec.select.TournamentSelection
#exch.subpop.0.select-to-die.pick-worst = true
#exch.subpop.1.select-to-die.pick-worst = true
#exch.subpop.2.select-to-die.pick-worst = true
#exch.subpop.3.select-to-die.pick-worst = true

#The number of emigrants sent at one time by generation #n. If not set, uses the default parameter below.
#exch.size = 5
#The generation when subpopulation #n begins sending emigrants. If not set, uses the default parameter below.
#exch.start = 1
#The number of generations that subpopulation #n waits between sending emigrants. If not set, uses the default parameter below.
#exch.mod = 10

#n.num-dest: The number of destination subpopulations for this subpopulation.
#subpop.n.dest.m: Subpopulation #n's destination #m is this subpopulation.
#exch.subpop.0.num-dest = 3
#exch.subpop.0.dest.0 = 1
#exch.subpop.0.dest.1= 2
#exch.subpop.0.dest.2 = 3
#exch.subpop.1.num-dest = 3
#exch.subpop.1.dest.0 = 0
#exch.subpop.1.dest.1= 2
#exch.subpop.1.dest.2 = 3
#exch.subpop.2.num-dest = 3
#exch.subpop.2.dest.0 = 0
#exch.subpop.2.dest.1= 1
#exch.subpop.2.dest.2 = 3
#exch.subpop.3.num-dest = 3
#exch.subpop.3.dest.0 = 0
#exch.subpop.3.dest.1= 1
#exch.subpop.3.dest.2 = 2

#exch.chatty = false;


# We're using standard breeding -- no cross-population breeding
breed =					ec.simple.SimpleBreeder
# We're using standard evaluation -- no coevolution
eval =					ec.simple.SimpleEvaluator
# We're using simple statistics
stat =					ec.simple.SimpleStatistics

#	Jobs
jobs = 1

#	Run for 300 generations, not quit prematurely if I find something ideal
generations =				2
quit-on-run-complete =			false



#	ec.Initializer
pop = 					ec.Population


# ec.Population
# No multiple populations
pop.subpops =				1
pop.subpop.0 = 				ec.Subpopulation


# ec.Subpopulation

# subpop size is 500 individuals
pop.subpop.0.size =			5
# don't bother trying to eliminate duplicates from the
# initial population
pop.subpop.0.duplicate-retries =	0

# ec.simple.SimpleBreeder
# By default elitism isn't done.  If you want to do elitism for, say,
# the top 10 individuals in subpopulation 0, you'd say:
#breed.elite.0 = 			10
breed.elite.0 = 			1

# ec.SimpleStatistics
# output statistics to the file "out.stat" in the directory
# the run was started in
stat.file				$out/Statistics.out
#stat.do-size = true
#stat.do-time = true
#stat.do-depth = true